# Snippets for Go

priority 10

# when to abbriviate and when not?
# b doesn't work here, because it ignores whitespace
# optional local name?
snippet /^import/ "Import declaration" r
import (
	"${1:package}"
)
endsnippet

snippet /^package/ "Package declaration" r
// Package $1 provides ...
package ${1:main}
endsnippet

# Mostly converted from: https://github.com/AlanQuatermain/go-tmbundle
snippet /^cons/ "Constants declaration" r
const (
	${1:constant}${2/(.+)/ /}${2:type} = ${0:value}
)
endsnippet

snippet /^con/ "Constant declaration" r
const ${1:name}${2/(.+)/ /}${2:type} = ${0:value}
endsnippet

snippet iota "Iota constant generator" b
const (
	${1:constant}${2/(.+)/ /}${2:type} = iota
)
endsnippet

snippet struct "Struct declaration" b
type ${1:Struct} struct {
	${0:${VISUAL}}
}
endsnippet

snippet interface "Interface declaration" b
type ${1:Interface} interface {
	${0:${VISUAL}}
}
endsnippet

snippet if "If statement" b
if ${1:condition}${1/(.+)/ /}{
	${0:${VISUAL}}
}
endsnippet

snippet switch "Switch statement" b
switch ${1:expression}${1/(.+)/ /}{
case$0
}
endsnippet

# functions
snippet /^main/ "Main function" r
func main() {
	${0:${VISUAL}}
}
endsnippet

snippet /^meth/ "Method" r
func (${1:receiver} ${2:type}) ${3:name}(${4:params})${5/(.+)/ /}${5:type} {
	${0:${VISUAL}}
}
endsnippet

snippet func "Function" b
func ${1:name}(${2:params})${3/(.+)/ /}${3:type} {
	${0:${VISUAL}}
}
endsnippet

snippet funch "HTTP handler" b
func ${1:handler}(${2:w} http.ResponseWriter, ${3:r} *http.Request) {
	${0:${VISUAL}}
}
endsnippet

# types and variables
snippet map "Map type" b
map[${1:keytype}]${2:valtype}
endsnippet

snippet : "Variable declaration :=" b
${1:name} := ${0:value}
endsnippet

snippet var "Variable declaration" b
var ${1:name}${2/(.+)/ /}${2:type}${3: = ${0:value}}
endsnippet

snippet vars "Variables declaration" b
var (
	${1:name}${2/(.+)/ /}${2:type}${3: = ${0:value} }
)
endsnippet

snippet json "JSON field"
\`json:"${1:displayName}"\`
endsnippet

# vim:ft=snippets:

# error handling
snippet err "Basic error handling" b
if err != nil {
	log.${1:Fatal}(err)
}
endsnippet

snippet Ask
import (
	"bufio"
	"fmt"
	"os"
	"strings"
)

func Ask(question string) string {
	reader := bufio.NewReader(os.Stdin)
	fmt.Printf("%s: ", question)
	text, _ := reader.ReadString('\n')
	return strings.TrimSuffix(text, "\n")
}

endsnippet

snippet CopyMap

func CopyMap(src map[string]string) map[string]string {
	if src == nil {
		return nil
	}
	// Initialize a new map
	dst := make(map[string]string)
	// range through the source map
	// and copy each element to the new one
	for k, v := range src {
		dst[k] = v
	}
	return dst
}
endsnippet

snippet DeleteSliceInt
// DeleteSlice removes an element at a specific index of an slice. An error is
// return in case the index is out of bounds or if the slice is nil or empty.
func DeleteSliceInt(s []int, i int) ([]int, error) {
	if len(s) == 0 {
		return nil, errors.New("Cannot delete an element from a nil or empty slice")
	}
	if i < 0 || i > len(s)-1 {
		return nil, errors.New("Index out of bounds")
	}

	return append(s[:i], s[i+1:]...), nil
}

endsnippet

snippet ExitOnError
// ExitOnError check error and exit if not nil
func ExitOnError(err error) {
	if err != nil {
		log.Errorf("error %v\n", err)
		os.Exit(1)
	}
}

endsnippet

snippet GetHomeDir
import (
	"os/user"
)

func GetHomeDir() (string, error) {
	usr, err := user.Current()
	if err == nil {
		return usr.HomeDir, nil
	}
	return "", err
}
endsnippet

snippet GetMatches

import "regexp"

// GetMatches parses each line and sticks the findings in a map
func GetMatches(regEx string, lines []string) (paramsMap map[string]string) {
	var compRegEx = regexp.MustCompile(regEx)

	paramsMap = make(map[string]string)

	for _, line := range lines {
		match := compRegEx.FindStringSubmatch(line)
		for i, name := range compRegEx.SubexpNames() {
			if i > 0 && i <= len(match) {
				paramsMap[name] = match[i]
			}
		}
	}
	return
}
endsnippet

snippet LoadStringLines
import (
	"io/ioutil"
	"strings"
)

func LoadStringLines(target string) ([]string, error) {
	var retv []string
	content, err := ioutil.ReadFile(target)
	if err != nil {
		return retv, err
	}

	for _, line := range strings.Split(string(content), "\n") {
		retv = append(retv, line)
	}
	return retv, nil
}

endsnippet

snippet MaxSliceInt
// MaxSliceInt return the maximum element of slice s or an error in case the s is
// nil or empty
func MaxSliceInt(s []int) (int, error) {
	if len(s) == 0 {
		return 0, errors.New("cannot find the maximum of a nil or empty slice")
	}

	max := s[0]
	for k := range s {
		if s[k] > max {
			max = s[k]
		}
	}

	return max, nil
}
endsnippet

snippet MinSliceInt
// MaxSliceInt return the minimum element of slice s or an error in case the s is
// nil or empty
func MinSliceInt(s []int) (int, error) {
	if len(s) == 0 {
		return 0, errors.New("cannot find the minimum of a nil or empty slice")
	}

	min := s[0]
	for k := range s {
		if s[k] < min {
			min = s[k]
		}
	}

	return min, nil
}
endsnippet

snippet MkdirAll
func MkdirAll(path string, mode int) {

	log.Debugf("MkdirAll: start")
	defer log.Debugf("MkdirAll: end")

	stat, err := os.Stat(path)

	// we found something
	if err == nil {
		// already exists
		if stat.IsDir() {
			log.Debugf("found dir: %s", path)
			return
		} else {
			log.Errorf("found target: %s but it is not a directory", path)
		}
	}

	mode_oct := os.FileMode(mode)
	os.MkdirAll(path, mode_oct)

}
endsnippet

snippet NewStruct
func New${1}() *${1} {
	retv := &${1}{}
	return retv
}
endsnippet

snippet ReverseSliceInt
func ReverseSliceInt(s []int) []int {
	if len(s) < 2 {
		return s
	}

	for i, j := 0, len(s)-1; i < j; i, j = i+1, j-1 {
		s[i], s[j] = s[j], s[i]
	}

	return s
}
endsnippet

snippet Sha256ChecksumString
import (
	"crypto/sha256"
	"fmt"
)

func Sha256ChecksumString(s string) string {
	return fmt.Sprintf("%x", sha256.Sum256([]byte(s)))
}
endsnippet

snippet SliceContainsInt
// SliceContainsInt return true if a slice contains a number.
func SliceContainsInt(s []int, x int) bool {
	if len(s) == 0 {
		return false
	}
	for k := range s {
		if s[k] == x {
			return true
		}
	}
	return false
}
endsnippet

snippet targetExists
import (
	"os"

	"google.golang.org/appengine/log"
)

// targetExists return true if target exists
func targetExists(targetpath string) bool {
	_, err := os.Stat(targetpath)
	if err == nil {
		return true
	}
	if !os.IsNotExist(err) {
		log.Errorf("cannot stat %s: %q", targetpath, err)
	}
	return false
}

endsnippet

snippet UniqueSliceInt
func UniqueSliceInt(s []int) []int {
	if len(s) < 2 {
		return s
	}

	seen := make(map[int]struct{})

	j := 0
	for k := range s {
		if _, ok := seen[s[k]]; ok {
			continue
		}
		seen[s[k]] = struct{}{}
		s[j] = s[k]
		j++
	}

	return s[:j]
}
endsnippet

snippet Which
import (
	"fmt"
	"os"
	"path"
	"strings"
)

// Which returns a command's path
func Which(command string) (string, error) {
	for _, dirname := range strings.Split(os.Getenv("PATH"), ":") {
		fullpath := path.Join(dirname, command)

		stat, err := os.Stat(fullpath)
		if err != nil {
			continue
		}

		switch mode := stat.Mode(); {
		case mode.IsDir():
			continue
		case mode&0100 != 0:
			return fullpath, nil
		case mode&0010 != 0:
			return fullpath, nil
		case mode&0001 != 0:
			return fullpath, nil
		}
	}
	return command, fmt.Errorf("Command %s not found", command)
}


endsnippet
